.\" -*- nroff -*-
.\"
.TH IBV_SHARE_PD 3 2017-11-11 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_share_pd \- share a protection domain (PD).
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs.h>
.sp
.BI "struct ibv_pd *ibv_share_pd(struct ibv_context " "*context" ", "
.BI "                            uint64_t " "share_key" "," "
.BI "                            uint32_t " "fd");
.sp
.fi
.SH "DESCRIPTION"
.B ibv_share_pd()
shares the protection domain specified by a file descriptor
.I fd
for the RDMA device context
.I context\fR.
.I share_key
and
.I fd
are 64 bit key and file descriptor used to map the PD via call to
.B ibv_alloc_shpd()\fR.
.I ibv_pd\fR created using
.B ibv_share_pd()
can be deallocated using
.B ibv_dealloc_pd()\fR.
Libibverbs keeps track of each instance of the shared PD and removes the PD from RDMA device when the last instance of the shared PD is deallocated.
.SH "RETURN VALUE"
.B ibv_share_pd()
returns a pointer to the shared pd or NULL if the request fails.
.SH "NOTES"
Even though the same PD is shared by multiple contexts of an RDMA device or processes, the life span of each resource created in an 'ibv_pd' linked to a context or process is limited by the life span of that instance of 'ibv_pd'. e.g. The life span of an MR
.I mr1
created under ibv_pd
.I pd1
(which is an instance of shared PD
.I shPD1\fR)
will end whenever
.I pd1
is deallocated, even though underlying
.I shPD1
may continue to live on.
.PP
Sharing PD is not supported among 'ibv_context' created for different RDMA devices.
.SH "SEE ALSO"
.BR ibv_alloc_shpd (3),
.BR ibv_dealloc_pd (3)

.SH "AUTHORS"
.TP
Shamir Rabinovitch <shamir.rabinovitch@oracle.com>
